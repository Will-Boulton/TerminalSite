@inject IJSRuntime jsRuntime
<div>
    <div class="inputline">
        <div class="prompt">@Prompt</div>
        <input class="terminal input" @onkeyup="@KeyUp" @bind="command" spellcheck="false" disabled="@disabled" autofocus="@(!disabled)" @ref="input" />
    </div>
    <CommandResponseBlock terminal="Parent" @ref="output"/>
</div>
@code {
    private static readonly string Prompt = @"$root # ";
    private static int key_ = 0;

    public int Key = key_++;

    [Parameter]
    public Terminal Parent { get;set; }

    public string command = "";
    private bool disabled = false;

    private ElementReference input;

    private CommandResponseBlock output;

    public void AddResponse(CommandResponse r)
    {
        output.AddResponse(r);
    }

    private void KeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            disabled = true;
            RunCommand(command);
            Parent.AddNew();

        }

        if (e.Code == "ArrowUp")
        {
            command = Parent.commandStore.NextCommand();
        }
        else if (e.Code == "ArrowDown")
        {
            command = Parent.commandStore.PreviousCommand();

        }
        StateHasChanged();
    }


    public void RunCommand(string input_command)
    {
        string[] parameters = input_command.Split(null);

        var commands = Commander.commands;
        if (Commander.commands.TryGetValue(parameters[0], out Command command))
        {
            command.Execute(Parent, output, parameters.Skip(1).ToArray());
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disabled)
        {
            await jsRuntime.InvokeVoidAsync("SetFocusToElement", input);
        }
    }

}
