@inject IJSRuntime JS

<div class="window_frame @(themeController.SelectedTheme)"
     draggable="@((!isMaximised ? "true" : "false"))" 
     @ondragstart="OnDragStart"  
     @ondragend="OnDragEnd"
     style=" top: @(offsetY)px; left: @(offsetX)px; width: @(Width)px; height: @(Height)px; resize:@((!isMaximised ? "both" : "none"));" hidden="@(!ReadyToShow)" @ref="@windowRef">
    <div class="title_bar" 
         @ondblclick="MaximiseOrUnmaximise">
        <div style="color:black;">@Title</div>
        <div class="button_div">
            @foreach (TitleButtonData item in TitleButtons)
            {
                <TitleBarButton Website="@item.Website" Link="@item.URL" />
            }
        </div>
    </div>
    <div class="window_content" 
         draggable="true"
         @ondragstart:preventDefault="true"
         @ondragstart:stopPropagation ="true"
         @ondragend:preventDefault="true"
         @ondragend:stopPropagation ="true">
        @ChildContent
    </div>
</div>

@code {
    [Parameter]
    public string Title { get;set;}
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int WindowDragPadding { get; set; } = 5;

    [CascadingParameter] public ThemeController themeController { get; set; }

    private List<TitleButtonData> TitleButtons;

    public double Width, Height = 0;

    private WindowDimension windowDims;

    private ElementReference windowRef;
    private bool ReadyToShow = false;
    protected override void OnInitialized()
    {
        Task.Run(() => SetInitialPos());
        base.OnInitialized();
        MakeTitleButtons();
    }

    /// <summary>
    /// Sets the inital position of the window inside the desktop
    /// </summary>
    /// <returns></returns>
    private async Task SetInitialPos()
    {
        windowDims = await getWindowDims();
        Width = 0.7 * windowDims.Width;
        Height = 0.7 * windowDims.Height;
        StateHasChanged();
        var result = await getBoundingClientRect(windowRef);
        offsetX = (windowDims.Width - result.Width) / 2;
        offsetY = (windowDims.Height - result.Height) / 2;
        ReadyToShow = true;
        StateHasChanged();
    }

    /// <summary>
    /// Get the dimesions of the user's viewport
    /// </summary>
    /// <returns></returns>
    private async Task<WindowDimension> getWindowDims()
    {
        return await JS.InvokeAsync<WindowDimension>("getWindowDimensions");
    }

    /// <summary>
    /// Get the bounding rectangle for an element
    /// </summary>
    /// <param name="refr">element</param>
    /// <returns></returns>
    private async Task<BoundingClientRect> getBoundingClientRect(ElementReference refr)
    {
        return await JS.InvokeAsync<BoundingClientRect>("getBoundingClientRect", new object[] { refr });
    }

    /// <summary>
    /// Put the title buttons in place on the taskbar
    /// </summary>
    private void MakeTitleButtons()
    {
        TitleButtons = new List<TitleButtonData>();

        var sites = SiteConfig.config.GetSection("Sites");
        foreach (var siteConfigItem in sites.GetChildren())
        {
            string url = siteConfigItem["URL"];

            string website = siteConfigItem["Website"];

            TitleButtons.Add(new TitleButtonData(website,url));
        }
    }

    private double prevWidth, prevHeight, prevOffsetX, prevOffsetY;
    private bool isMaximised = false;

    /// <summary>
    /// Maximise the window if it isn't maximised and do the opposite if it is
    /// </summary>
    private async void MaximiseOrUnmaximise()
    {
        windowDims = await getWindowDims();

        if (!isMaximised)
        {
            var result = await getBoundingClientRect(windowRef);
            prevWidth = result.Width;
            prevHeight = result.Height;
            prevOffsetX = offsetX;
            prevOffsetY = offsetY;
            Width = windowDims.Width - 2 * WindowDragPadding;
            Height = windowDims.Height - 2 * WindowDragPadding;
            offsetX = offsetY = WindowDragPadding;
        }
        else
        {
            Width = prevWidth;
            Height = prevHeight;
            offsetX = prevOffsetX;
            offsetY = prevOffsetY;
        }
        isMaximised = !isMaximised;
        StateHasChanged();
    }

    private double startX, startY, offsetX, offsetY;

    private async void OnDragStart(DragEventArgs args)
    {
        windowDims = await getWindowDims();
        startX = args.ClientX;
        startY = args.ClientY;
    }

    private void OnDragEnd(DragEventArgs args)
    {
        offsetX = Math.Min(Math.Max( offsetX  + (args.ClientX - startX), WindowDragPadding), windowDims.Width - Width - WindowDragPadding);
        offsetY = Math.Min(Math.Max( offsetY  + (args.ClientY - startY), WindowDragPadding), windowDims.Height - Height - WindowDragPadding);
    }
}
