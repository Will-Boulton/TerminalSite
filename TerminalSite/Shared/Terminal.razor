@inject IJSRuntime JS
@inject IConfiguration config

<link href="css/Terminal.css" rel="stylesheet" />
<div class="terminal container" @ref="scroll" @onclick="Focus">
    @for (int i = 0; i < lines.Count; i++)
    {
        TerminalInputModel item = lines[i];
        <CascadingValue Value="this">
            <Input Model="item" @key="item.Key" />
        </CascadingValue>
    }
</div>
@code {

    public PromptContext prompt { get; set; }

    [CascadingParameter] public ThemeController themeController { get; set; }

    public Commander commander;
    public FileSystem fileSystem;

    private List<Input> Inputs;

    private List<TerminalInputModel> lines;

    public CommandStore commandStore;


    protected override void OnInitialized()
    {
        commander = new Commander(config);
        fileSystem = new FileSystem(config.GetSection("filesystem"));
        prompt = new PromptContext() { Separator = "^", CurrentDirectory = fileSystem.root, User = "admin" };
        commandStore = new CommandStore();
        Inputs = new List<Input>();
        lines = new List<TerminalInputModel>();

        lines.Add(new TerminalInputModel() { Prompt = prompt, Disabled = true, Placeholder = "Welcome! Enter a command to do something." });
        lines.Add(new TerminalInputModel() { Prompt = prompt, Disabled = true, Placeholder = "" });
        lines.Add(new TerminalInputModel() { Prompt = prompt, Disabled = true, Placeholder = "If you're stuck try 'help'." });
        lines.Add(new TerminalInputModel() { Prompt = prompt });
    }

    ElementReference scroll;

    public void AddNew()
    {
        lines.Add(new TerminalInputModel() { Prompt = prompt });
        StateHasChanged();
    }

    public void RegisterInput(Input newInput) { Inputs.Add(newInput); StateHasChanged(); }

    public void DisposeInput(Input input) { Inputs.Remove(input); StateHasChanged(); }

    public void Clear()
    {
        Inputs = new List<Input>();
        lines = new List<TerminalInputModel>();
    }

    public async void scrollToBotton()
    {
        await JS.InvokeVoidAsync("ScrollToBottom", scroll);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (TerminalInputModel input in lines.SkipLast(1))
        {
            input.Disabled = true;
        }
        scrollToBotton();
        Focus();
    }

    public async void Focus()
    {
        if (lines.Count > 0)
            await JS.InvokeVoidAsync("SetFocusToElement", Inputs[lines.Count - 1].inputRef);
    }
}
