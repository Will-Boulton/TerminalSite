@using CommandSite.Commands

<div class="terminal">
    @foreach (var item in lines)
    {
        <TerminalLine Parent="this" @key="item.Key"/>
    }
</div>
@code {
    List<TerminalLine> lines;

    protected override void OnInitialized()
    {
        commandOptions = new Dictionary<string, Command>();
        lines = new List<TerminalLine>() { new TerminalLine() { Parent = this } };
        commands = new List<Command>()
        {
            new CatCommand(this),
            new MultiValueCommand("git","Display github URL",this, _ => "\n <a href=\"https://github.com/Will-Boulton \" target=\"_blank\">https://github.com/Will-Boulton</a> \n"),
            new MultiValueCommand("linkedin","Display linkedin URL",this,_ => "\n <a href=\"https://www.linkedin.com/in/will-boulton \" target=\"_blank\">https://www.linkedin.com/in/will-boulton/</a> \n"),
            new ClearCommand(this),
            new HelpCommand(this)
        };
    }

    private List<Command> _commands;

    public List<Command> commands
    {
        get => _commands;
        private set
        {
            _commands = value;

            foreach (var command in value)
            {
                commandOptions.Add(command.CommandKey, command);
            }
        }
    }

    public string RunCommand(string key, TerminalOutput output,params string[] parameters)
    {
        if(commandOptions.TryGetValue(key, out Command command))
        {
            command.Response(output, parameters);
        }
        return "";
    }

    public Stack<string> PreviousCommands = new Stack<string>();

    public void AddNew()
    {
        lines.Add(new TerminalLine() { Parent = this });
        StateHasChanged();
    }

    public void Clear()
    {
        lines = new List<TerminalLine>();
        StateHasChanged();
    }

    public  Dictionary<string, Command> commandOptions;
}
